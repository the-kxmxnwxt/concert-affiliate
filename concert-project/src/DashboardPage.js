import React, { useState, useEffect } from 'react';
import './DashboardPage.css';
import { useKeycloak } from '@react-keycloak/web';
import { Link } from 'react-router-dom';
import { FiCopy, FiLogOut } from 'react-icons/fi';
import { Bar } from 'react-chartjs-2';  // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Bar Chart
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import Footer from './components/Footer';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

function DashboardPage() {
  const { keycloak } = useKeycloak();
  const [clickLogs, setClickLogs] = useState([]);  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
  const [copySuccess, setCopySuccess] = useState(false);
  const [graphData, setGraphData] = useState({});

  useEffect(() => {
    const registerAffiliator = async () => {
      try {
        const res = await fetch("https://dispatched-blond-resolved-graduated.trycloudflare.com/api/register", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${keycloak.token}`,
          },
        });
  
        if (!res.ok) {
          console.error("‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Affiliator ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
      } catch (err) {
        console.error("‚ùå Register failed:", err);
      }
    };
  
    const fetchClickSummary = async () => {
      try {
        const res = await fetch("https://dispatched-blond-resolved-graduated.trycloudflare.com/api/v1/dashboard/sum-click", {
          headers: {
            Authorization: `Bearer ${keycloak.token}`,
          },
        });
  
        if (!res.ok) throw new Error("Failed to fetch summary");
        const data = await res.json();
        setClickLogs(data);
  
        if (data && Array.isArray(data)) {
          const labels = data.map(item => item.name);
          const clickCounts = data.map(item => item.click_count);
  
          setGraphData({
            labels: labels,
            datasets: [{
              label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å',
              data: clickCounts,
              backgroundColor: '#cc1689',
              borderColor: '#388E3C',
              borderWidth: 1,
            }]
          });
        }
      } catch (err) {
        console.error("‚ùå Summary API error:", err);
      }
    };
  
    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ token ‡∏û‡∏£‡πâ‡∏≠‡∏°
    if (keycloak?.authenticated && keycloak.token) {
      registerAffiliator();
      fetchClickSummary();
    }
  }, [keycloak?.authenticated, keycloak.token]);  // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° keycloak.token ‡πÄ‡∏õ‡πá‡∏ô dependency
  

  const handleCopy = () => {
    // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'Bearer <token>'
    navigator.clipboard.writeText(`Bearer ${keycloak.token}`);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 2000);
  };

  return (
    <div className="dashboard-layout">
      <main className="main-content">
        <h1>üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {keycloak?.tokenParsed?.name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}</h1>
        <div className="token-box">
          <h4>üîê Access Token:</h4>
          <div className="token-content">
            {/* ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'Bearer <token>' */}
            <textarea value={`Bearer ${keycloak.token}`} readOnly rows={6} />
            <button className="copy-btn" onClick={handleCopy}>
              <FiCopy /> {copySuccess ? '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß' : '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å'}
            </button>
          </div>
        </div>

        <div className="action-buttons-container">
  <Link to="/websites" className="action-card-link">
    <div className="action-card">
      <h3>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</h3>
      <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå</p>
    </div>
  </Link>
  <Link to="/swagger" className="action-card-link">
    <div className="action-card">
    <h3>üéµ ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï</h3>
    <p>‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Concert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î API</p>
    </div>
  </Link>
  <Link to="/swagger" className="action-card-link">
    <div className="action-card">
    <h3>‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API</h3>
    <p>‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Swagger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö API</p>
    </div>
  </Link>
</div>


        <h2 style={{ marginTop: '40px' }}>üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Click Logs</h2>
        <div className="table-wrapper">
          <table className="click-table">
            <thead>
              <tr>
                <th>üé§ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å</th>
                <th>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</th>
              </tr>
            </thead>
            <tbody>
              {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö clickLogs ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ map */}
              {Array.isArray(clickLogs) && clickLogs.length > 0 ? (
                clickLogs.map((item, index) => (
                  <tr key={index}>
                    <td>{item.name}</td>
                    <td>{item.click_count}</td>
                    <td>{new Date(item.last_click).toLocaleString()}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* üëá ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Å‡∏£‡∏≤‡∏ü */}
        <h2>üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï</h2>
        <div className="card-container">
          <div className="card">
            {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ graphData ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô render ‡∏Å‡∏£‡∏≤‡∏ü */}
            {graphData.labels && graphData.labels.length > 0 ? (
              <Bar 
                data={graphData} 
                options={{
                  responsive: true,
                  plugins: {
                    title: {
                      display: true,
                      text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï',
                      font: {
                        size: 18,
                      }
                    },
                    legend: {
                      position: 'top',
                    },
                  },
                  scales: {
                    x: {
                      title: {
                        display: true,
                        text: '‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï',
                      },
                    },
                    y: {
                      title: {
                        display: true,
                        text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å',
                      },
                      beginAtZero: true,
                    },
                  },
                }} 
              />
            ) : (
              <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü</p>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}

export default DashboardPage;
